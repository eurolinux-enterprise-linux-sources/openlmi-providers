/*
 * Copyright (C) 2013-2014 Red Hat, Inc.  All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * Authors: Michal Minar <miminar@redhat.com>
 *          Jan Safranek <jsafrane@redhat.com>
 */

#pragma locale ("en_US")

/******************************************************************************
 * Method result associations for asynchronous methods. They're are used in
 * CIM_ConcreteJob.JobOutParameters and LMI_InstMethodCall.MethodParameters.
 * In ideal world, they wouldn't be needed. Let's use them temporarily
 * until pegasus supports instances of unknown classes.
 ******************************************************************************/
[Version("0.4.3"), Association]
class __MethodParameters_InstallFromSoftwareIdentity {

      [Description("Reference to the Collection to which the"
        " Software Identity SHALL be added. If NULL then the Software Identity"
        " will not be added to a Collection.")]
    LMI_SystemSoftwareCollection REF Collection;

      [Description("Options to control the install process."
        " Defer target/system reset : do not automatically reset the"
        " target/system. Force installation : Force the installation of the"
        " same or an older SoftwareIdentity. Install: Perform an installation"
        " of this software on the managed element. Update: Perform an update of"
        " this software on the managed element. Repair: Perform a repair of the"
        " installation of this software on the managed element by forcing all"
        " the files required for installing the software to be reinstalled."
        " Reboot: Reboot or reset the system immediately after the install or"
        " update of this software, if the install or the update requires a"
        " reboot or reset. Password: Password will be specified as clear text"
        " without any encryption for performing the install or update."
        " Uninstall: Uninstall the software on the managed element. Log: Create"
        " a log for the install or update of the software. SilentMode: Perform"
        " the install or update without displaying any user interface."
        " AdministrativeMode: Perform the install or update of the software in"
        " the administrative mode. ScheduleInstallAt: Indicates the time at"
        " which the install or update of the software will occur."),
       ModelCorrespondence {
           "CIM_SoftwareInstallationService.InstallOptionsValues[]",
           "CIM_SoftwareInstallationServiceCapabilities.SupportedInstallOptions[]"},
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10",
                  "11", "12", "13", "..", "32768..65535" },
       Values { "Defer target/system reset", "Force installation", "Install",
                "Update", "Repair", "Reboot", "Password", "Uninstall", "Log",
                "SilentMode", "AdministrativeMode", "ScheduleInstallAt",
                "DMTF Reserved", "Vendor Specific"},
       ArrayType("Indexed")]
    uint16 InstallOptions[];

      [Description(
        " InstallOptionsValues is an array of strings providing additional"
        " information to InstallOptions for the method to install the software."
        " Each entry of this array is related to the entry in InstallOptions"
        " that is located at the same index providing additional information for"
        " InstallOptions. If the index in InstallOptions has the value"
        " \"Password\" then a value at the corresponding index of"
        " InstallOptionValues shall not be NULL. If the index in InstallOptions"
        " has the value \"ScheduleInstallAt\" then the value at the"
        " corresponding index of InstallOptionValues shall not be NULL and shall"
        " be in the datetime type format. If the index in InstallOptions has the"
        " value \"Log\" then a value at the corresponding index of"
        " InstallOptionValues may be NULL. If the index in InstallOptions has"
        " the value \"Defer target/system reset\", \"Force installation\","
        " \"Install\", \"Update\", Repair\" or \"Reboot\" then a value at the"
        " corresponding index of InstallOptionValues shall be NULL."),
       ArrayType("Indexed"),
       ModelCorrespondence {"CIM_SoftwareInstallationService.InstallOptions[]"}]
    string InstallOptionValues[];

      [Description("Reference to the source of the install.")]
    LMI_SoftwareIdentity REF Source;

      [Description("The installation target. If NULL then"
        " the SoftwareIdentity will be added to Collection only. The underlying"
        " implementation is expected to be able to obtain any necessary"
        " metadata from the Software Identity.")]
    CIM_ComputerSystem REF Target;

};

[Version("0.2.0"), Association]
class __MethodParameters_InstallFromURI {
};

[Version("0.2.0"), Association]
class __MethodParameters_InstallFromByteStream {
};

[Version("0.2.0"), Association]
class __MethodParameters_VerifyInstalledIdentity {
};


[Version("0.2.0"), Association]
class __MethodParameters_InstallFromSoftwareIdentity_Result
    :  __MethodParameters_InstallFromSoftwareIdentity
{
    uint32 __ReturnValue;
};

[Version("0.2.0"), Association]
class __MethodParameters_InstallFromURI_Result
    : __MethodParameters_InstallFromURI
{
    uint32 __ReturnValue;
};

[Version("0.2.0"), Association]
class __MethodParameters_InstallFromByteStream_Result
    : __MethodParameters_InstallFromByteStream
{
    uint32 __ReturnValue;
};

[Version("0.2.0"), Association,
Description("This class, representing results of"
    " SoftwareInstallationService::VerifyInstalledIdentity() is missing"
    " Failed property, which is an array of references to failed tests."
    " These can be accessed through the LMI_AffectedSoftwareJobElement"
    " association class between particular LMI_SoftwareVerificationJob"
    " and LMI_SoftwareIdentityFileCheck.") ]
class __MethodParameters_VerifyInstalledIdentity_Result
    :  __MethodParameters_VerifyInstalledIdentity
{
    uint32 __ReturnValue;
    /*
     Array of references can not be listed as a property of association class.
    LMI_SoftwareIdentityFileCheck REF Failed[];
    */
};

d623deb13612290e85cd1d4cd9a8aafb5c78c17b
Author: Jan Synacek <jsynacek@redhat.com>
Date:   Thu Jan 9 15:41:21 2014 +0100

    logicalfile: don't automatically fill FSName and FSCreationClassName

    Set there properties on output, meaning when GetInstance() is invoked,
    only when they are empty. Otherwise leave them unchanged.

6 files changed, 53 insertions(+), 38 deletions(-)
 .../LMI_DirectoryContainsFileProvider.c            | 14 ++++----
 src/logicalfile/LMI_FileIdentityProvider.c         | 11 +++---
 src/logicalfile/LMI_RootDirectoryProvider.c        | 18 ++++------
 src/logicalfile/LMI_UnixFileProvider.c             |  6 +++-
 src/logicalfile/file.c                             | 40 +++++++++++++++-------
 src/logicalfile/test/test_basic.py                 |  2 ++

diff --git a/src/logicalfile/LMI_DirectoryContainsFileProvider.c b/src/logicalfile/LMI_DirectoryContainsFileProvider.c
index 06810b7..366041b 100644
--- a/src/logicalfile/LMI_DirectoryContainsFileProvider.c
+++ b/src/logicalfile/LMI_DirectoryContainsFileProvider.c
@@ -43,6 +43,6 @@ static CMPIStatus logicalfile_objectpath_from_path(
 
     char fileclass[BUFLEN];
-    char *fsname;
-    char *fsclassname;
+    char *fsname = NULL;
+    char *fsclassname = NULL;
 
     if (lstat(abspath, &sb) < 0) {
@@ -233,6 +233,6 @@ static CMPIStatus associators(
         CIM_DirectoryRef_Init(&lmi_dr, _cb, ns);
 
-        char *fsname;
-        char *fsclassname;
+        char *fsname = NULL;
+        char *fsclassname = NULL;
 
         st = get_fsinfo_from_path(_cb, path, &fsclassname, &fsname);
@@ -251,5 +251,4 @@ static CMPIStatus associators(
             CMReturnInstance(cr, ci);
         }
-        free(fsname);
     } else {
         /* this association does not associate with given 'cop' class */
@@ -273,6 +272,6 @@ static CMPIStatus references(
     const char *ns = KNameSpace(cop);
     const char *path;
-    char *fsname;
-    char *fsclassname;
+    char *fsname = NULL;
+    char *fsclassname = NULL;
     char ccname[BUFLEN];
 
@@ -380,5 +379,4 @@ static CMPIStatus references(
     }
 
-    free(fsname);
     CMReturn(CMPI_RC_OK);
 }
diff --git a/src/logicalfile/LMI_FileIdentityProvider.c b/src/logicalfile/LMI_FileIdentityProvider.c
index 90c5cbe..66f2c3c 100644
--- a/src/logicalfile/LMI_FileIdentityProvider.c
+++ b/src/logicalfile/LMI_FileIdentityProvider.c
@@ -46,6 +46,6 @@ static CMPIStatus associators(
     const char *path;
     char fileclass[BUFLEN];
-    char *fsname;
-    char *fsclassname;
+    char *fsname = NULL;
+    char *fsclassname = NULL;
 
     st = check_assoc_class(_cb, ns, assocClass, LMI_FileIdentity_ClassName);
@@ -116,5 +116,4 @@ static CMPIStatus associators(
         res = CMReturnInstance(cr, ci);
     }
-    free(fsname);
     return res;
 }
@@ -137,6 +136,6 @@ static CMPIStatus references(
     const char *path;
     char fileclass[BUFLEN];
-    char *fsname;
-    char *fsclassname;
+    char *fsname = NULL;
+    char *fsclassname = NULL;
 
     st = check_assoc_class(_cb, ns, assocClass, LMI_FileIdentity_ClassName);
@@ -211,5 +210,4 @@ static CMPIStatus references(
         res = CMReturnInstance(cr, ci);
     }
-    free(fsname);
     return res;
 }
@@ -379,3 +377,4 @@ KONKRET_REGISTRATION(
 /* Local Variables: */
 /* indent-tabs-mode: nil */
+/* c-basic-offset: 4 */
 /* End: */
diff --git a/src/logicalfile/LMI_RootDirectoryProvider.c b/src/logicalfile/LMI_RootDirectoryProvider.c
index b8f442a..9b10a7d 100644
--- a/src/logicalfile/LMI_RootDirectoryProvider.c
+++ b/src/logicalfile/LMI_RootDirectoryProvider.c
@@ -43,6 +43,6 @@ static CMPIStatus associators(
     const char *comp_ccname = get_system_creation_class_name();
     const char *path = get_string_property_from_op(cop, "Name");
-    char *fsname;
-    char *fsclassname;
+    char *fsname = NULL;
+    char *fsclassname = NULL;
     const char *systemname = lmi_get_system_creation_class_name();
 
@@ -97,9 +97,7 @@ static CMPIStatus associators(
     } else {
         /* this association does not associate with given 'cop' class */
-        free(fsname);
         CMReturn(CMPI_RC_OK);
     }
 
-    free(fsname);
     CMReturn(CMPI_RC_OK);
 }
@@ -128,6 +126,6 @@ static CMPIStatus references(
     check_class_check_status(st);
 
-    char *fsname;
-    char *fsclassname;
+    char *fsname = NULL;
+    char *fsclassname = NULL;
     st = get_fsinfo_from_path(_cb, "/", &fsclassname, &fsname);
     check_status(st);
@@ -164,5 +162,4 @@ static CMPIStatus references(
     } else {
         /* this association does not associate with given 'cop' class */
-        free(fsname);
         CMReturn(CMPI_RC_OK);
     }
@@ -175,5 +172,4 @@ static CMPIStatus references(
         CMReturnInstance(cr, ci);
     }
-    free(fsname);
     CMReturn(CMPI_RC_OK);
 }
@@ -211,6 +207,6 @@ static CMPIStatus LMI_RootDirectoryEnumInstances(
     CMPIObjectPath *o;
     CMPIStatus st;
-    char *fsname;
-    char *fsclassname;
+    char *fsname = NULL;
+    char *fsclassname = NULL;
     const char *ns = KNameSpace(cop);
 
@@ -228,5 +224,4 @@ static CMPIStatus LMI_RootDirectoryEnumInstances(
     LMI_RootDirectory_SetObjectPath_PartComponent(&lmi_rd, o);
 
-    free(fsname);
     return CMReturnInstance(cr, LMI_RootDirectory_ToInstance(&lmi_rd, NULL));
 }
@@ -364,3 +359,4 @@ KONKRET_REGISTRATION(
 /* Local Variables: */
 /* indent-tabs-mode: nil */
+/* c-basic-offset: 4 */
 /* End: */
diff --git a/src/logicalfile/LMI_UnixFileProvider.c b/src/logicalfile/LMI_UnixFileProvider.c
index 165eb82..347975c 100644
--- a/src/logicalfile/LMI_UnixFileProvider.c
+++ b/src/logicalfile/LMI_UnixFileProvider.c
@@ -136,9 +136,12 @@ static CMPIStatus LMI_UnixFileGetInstance(
     }
     /* set ignored stuff */
+    /* only use udev information if no fs information is provided */
+    /* discarding const qualifiers is ok here, it makes the code a bit more simple */
+    fsname = (char *) KChars(lmi_file.FSName.value);
+    fsclassname = (char *) KChars(lmi_file.FSCreationClassName.value);
     st = get_fsinfo_from_stat(_cb, &sb, path, &fsclassname, &fsname);
     check_status(st);
     LMI_UnixFile_Set_FSCreationClassName(&lmi_file, fsclassname);
     LMI_UnixFile_Set_FSName(&lmi_file, fsname);
-    free(fsname);
     get_class_from_stat(&sb, aux);
     LMI_UnixFile_Set_LFCreationClassName(&lmi_file, aux);
@@ -265,3 +268,4 @@ KONKRET_REGISTRATION(
 /* Local Variables: */
 /* indent-tabs-mode: nil */
+/* c-basic-offset: 4 */
 /* End: */
diff --git a/src/logicalfile/file.c b/src/logicalfile/file.c
index e90e77a..546b770 100644
--- a/src/logicalfile/file.c
+++ b/src/logicalfile/file.c
@@ -102,18 +102,30 @@ CMPIStatus get_fsinfo_from_stat(const CMPIBroker *b, const struct stat *sb, cons
     udev_dev = udev_device_new_from_device_id(udev_ctx, dev_id);
     if ((dev_name = udev_device_get_property_value(udev_dev, "ID_FS_UUID_ENC"))) {
-        if (asprintf(fsname, "UUID=%s", dev_name) < 0) {
-            return_with_status(b, &st, ERR_FAILED, "asprintf failed");
+        if (!*fsname) {
+            if (asprintf(fsname, "UUID=%s", dev_name) < 0) {
+                return_with_status(b, &st, ERR_FAILED, "asprintf failed");
+            }
+        }
+        if (!*fsclassname) {
+            *fsclassname = FSCREATIONCLASSNAME_LOCAL;
         }
-        *fsclassname = FSCREATIONCLASSNAME_LOCAL;
     } else if ((dev_name = udev_device_get_property_value(udev_dev, "DEVNAME"))) {
-        if (asprintf(fsname, "DEVICE=%s", dev_name) < 0) {
-            return_with_status(b, &st, ERR_FAILED, "asprintf failed");
+        if (!*fsname) {
+            if (asprintf(fsname, "DEVICE=%s", dev_name) < 0) {
+                return_with_status(b, &st, ERR_FAILED, "asprintf failed");
+            }
+        }
+        if (!*fsclassname) {
+            *fsclassname = FSCREATIONCLASSNAME_LOCAL;
         }
-        *fsclassname = FSCREATIONCLASSNAME_LOCAL;
     } else {
-        if (asprintf(fsname, "PATH=%s", path) < 0) {
-            return_with_status(b, &st, ERR_FAILED, "asprintf failed");
+        if (!*fsname) {
+            if (asprintf(fsname, "PATH=%s", path) < 0) {
+                return_with_status(b, &st, ERR_FAILED, "asprintf failed");
+            }
+        }
+        if (!*fsclassname) {
+            *fsclassname = FSCREATIONCLASSNAME_TRANSIENT;
         }
-        *fsclassname = FSCREATIONCLASSNAME_TRANSIENT;
     }
     udev_device_unref(udev_dev);
@@ -176,6 +188,6 @@ CMPIStatus stat_logicalfile_and_fill(
     struct stat sb;
     char buf[BUFLEN];
-    char *fsname = NULL;
-    char *fsclassname = NULL;
+    char *fsname;
+    char *fsclassname;
     const char *path = KChars(lf->lf.datafile.Name.value);
     CMPIStatus st = {.rc = CMPI_RC_OK};
@@ -188,4 +200,8 @@ CMPIStatus stat_logicalfile_and_fill(
     get_class_from_stat(&sb, buf);
 
+    /* only use udev information if no fs information is provided */
+    /* discarding const qualifiers is ok here, it makes the code a bit more simple */
+    fsname = (char *) KChars(lf->lf.datafile.FSName.value);
+    fsclassname = (char *) KChars(lf->lf.datafile.FSCreationClassName.value);
     st = get_fsinfo_from_stat(b, &sb, path, &fsclassname, &fsname);
     check_status(st);
@@ -233,5 +249,4 @@ CMPIStatus stat_logicalfile_and_fill(
     }
 
-    free(fsname);
     return st;
 }
@@ -244,3 +259,4 @@ void _dump_objectpath(const CMPIObjectPath *o)
 /* Local Variables: */
 /* indent-tabs-mode: nil */
+/* c-basic-offset: 4 */
 /* End: */
diff --git a/src/logicalfile/test/test_basic.py b/src/logicalfile/test/test_basic.py
index 26f525a..020439a 100644
--- a/src/logicalfile/test/test_basic.py
+++ b/src/logicalfile/test/test_basic.py
@@ -498,4 +498,6 @@ class TestLogicalFile(LogicalFileTestBase):
         cop = self.cop.copy()
         cop['Name'] = self.transient_file['path']
+        cop['FSName'] = ''
+        cop['FSCreationClassName'] = ''
 
         try:

